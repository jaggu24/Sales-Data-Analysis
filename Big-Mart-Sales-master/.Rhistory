gendre=c('M','F','F','M','M','F')
height=c(23,45,13,42,76,84)
s=data.frame(c(gendre,height),row.names = c("Alex","Dharini","Ananya","Manoj","shayam","Swarna"))
s=as.data.frame(c(gendre,height),row.names = c("Alex","Dharini","Ananya","Manoj","shayam","Swarna"))
s=as.data.frame(c(gendre,height))
s
s=as.data.frame(gendre,height)
s=as.data.frame(gendre,height,row.names = c("Alex","Dharini","Ananya","Manoj","shayam","Swarna"))
s
s=as.data.frame((gendre,height),row.names = c("Alex","Dharini","Ananya","Manoj","shayam","Swarna"))
s=as.data.frame(list(gendre,height),row.names = c("Alex","Dharini","Ananya","Manoj","shayam","Swarna"))
s
colnames(s)=c("Gendre","Height")
s
gendre21=c('F','M','F','F','F','F')
height21=c(93,25,10,41,96,84)
q=as.data.frame(list(gendre21,height21),row.names = c("Alex","Dharini","Ananya","Manoj","shayam","Swarna"))
colnames(s)=c("Gendre21","Height21")
q
s=as.data.frame(list(gendre,height),row.names = c("Alex","Dharini","Ananya","Manoj","shayam","Swarna"))
colnames(q)=c("Gendre21","Height21")
q
darta1=cbind(s,q)
darta1
s
colnames(s)=c("Gendre","Height")
s
darta1=cbind(s,q)
darta1
store1=subset(darta1,darta1$Gendre=="F")
store1
store1=subset(darta1,(darta1$Gendre=="F"&&darta1$Gendre21=="M"))
store1
store1=subset(darta1,(darta1$Gendre=="F"&&darta1$Gendre21=="F"))
store1
store1=subset(darta1,((darta1$Gendre=="F")&&(darta1$Gendre21=="F")))
store1
store1=subset(darta1,((darta1$Gendre=="F")||(darta1$Gendre21=="F")))
store1
store1=subset(darta1,((darta1$Gendre=="F")&(darta1$Gendre21=="F")))
store1
store1=subset(darta1,((darta1$Gendre=="F")&(darta1$Gendre21=="M")))
store1
install.packages("markdown")
library("markdown", lib.loc="~/R/win-library/3.4")
install.packages("knitr")
library("markdown", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
library("magrittr", lib.loc="~/R/win-library/3.4")
library("highr", lib.loc="~/R/win-library/3.4")
library("glue", lib.loc="~/R/win-library/3.4")
library("stringr", lib.loc="~/R/win-library/3.4")
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
install.packages("rmarkdown", contriburl = "http://cran.r-project.org/src/contrib", type = "source")
library("markdown", lib.loc="~/R/win-library/3.4")
install.packages(c("digest", "httpuv", "markdown", "mime", "Rcpp", "rlang"))
install.packages("rmarkdown")
library("rmarkdown", lib.loc="~/R/win-library/3.4")
install.packages("shiny")
library("shiny", lib.loc="~/R/win-library/3.4")
runApp('F:/Rprog/pack1test')
library("shiny", lib.loc="~/R/win-library/3.4")
shiny::runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
r1=na.omit(airquality)
runApp('F:/Rprog/Rpackage/Sales-Data-Analysis')
install.packages("car")
install.packages("car")
library(corrgram)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/package1.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
setwd("F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master")
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
corrplot(corr=cor(Corr_Matrix),method="ellipse")
typeof(table4)
View(table4)
print(table2)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Sales Data Analysis")
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Tab1","First", plotOutput("distPlot")),
tabPanel("Tab2","Second", plotOutput("distPlot1")),
tabPanel("Tab3","Third",plotOutput("distPlot2")),
tabPanel("Tab4","Fourth",plotOutput("distPlot3")),
tabPanel("Tab5","Fourth",plotOutput("distPlot4")),
tabPanel("Table1","Fifth",verbatimTextOutput("table1"))
)
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#    x    <- faithful[, 2]
#    bins <- seq(min(x), max(x))
par(mfrow=c(2,2))
boxplot(BigMart$Item_Visibility,horizontal = TRUE,main="Item Visibility",col="Yellow")
boxplot(BigMart$Item_Weight,horizontal = TRUE,main="Item Weight",col="Yellow")
boxplot(BigMart$Item_MRP,horizontal = TRUE,main="Item MRP",col="Yellow")
# draw the histogram with the specified number of bins
})
output$distPlot3 <- renderPlot({
# generate bins based on input$bins from ui.R
#    x    <- faithful[, 2]
boxplot(BigMart$Item_Outlet_Sales,horizontal = TRUE,main="Item Output Sales",col="Yellow")
#    hist(x, breaks = bins, col = 'darkgray', border = 'white')
#    bins <- seq(min(x), max(x))
corrgram(BigMart,upper.panel =panel.pie,text.panel =panel.txt, lower.panel = panel.shade)
# draw the histogram with the specified number of bins
#    hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
# generate bins based on input$bins from ui.R
#    x    <- faithful[, 2]
#    bins <- seq(min(x), max(x))
# draw the histogram with the specified number of bins
#    hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
print(table2)
print(table3)
print(table4)
})
output$distPlot1 <- renderPlot({
# generate bins based on input$bins from ui.R
#x    <- faithful[, 2]
#bins <- seq(min(x), max(x))
output$distPlot4 <- renderPlot({
#    plot(r1$Ozone~r1$Temp)
pairs(~BigMart$Item_Visibility+BigMart$Item_Weight+BigMart$Item_MRP+BigMart$Item_Outlet_Sales,col="Red")
output$table1 <- renderPrint({
print(table1)
par(mfrow=c(2,2))
hist(BigMart$Item_Visibility,main="Item Visibility",col="Yellow",xlab = "Visiblity")
hist(BigMart$Item_Weight,main="Item Weight",col="Yellow",xlab = "Weight")
hist(BigMart$Item_MRP,main="Item MRP",col="Yellow",xlab = "MRP")
hist(BigMart$Item_Outlet_Sales,main="Item Output Sales",col="Yellow",xlab = "Outlet Sales")
# draw the histogram with the specified number of bins
})
output$distPlot2 <- renderPlot({
# generate bins based on input$bins from ui.R
#    x    <- faithful[, 2]
#    bins <- seq(min(x), max(x))
par(mfrow=c(1,3))
plot(x=BigMart$Item_MRP,y=BigMart$Item_Outlet_Sales  ,col=c("Red","Orange"),xlab="MRP",ylab="Outlet Sales")
plot(y=BigMart$Item_Outlet_Sales,x=BigMart$Item_Weight,col=c("Red","Orange"),xlab="Item Weight",ylab="Output Sales")
plot(x=BigMart$Item_Visibility ,y=BigMart$Item_Outlet_Sales,col=c("Red","Orange"),xlab="Item Visibility",ylab="Output Sales")
# draw the histogram with the specified number of bins
#    hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
r1=na.omit(airquality)
Train <- read.csv(paste("Train.csv",sep=""))
str(Train)
Index <- which(Train$Item_Fat_Content=="LF"|Train$Item_Fat_Content=="low fat")
Index2 <- which(Train$Item_Fat_Content=="reg")
Train[Index2,"Item_Fat_Content"] <- "Regular"
View(Train)
BigMart <- na.omit(Train)
describe(BigMart)
Fat_Level <- xtabs(~BigMart$Item_Fat_Content)
#Fat_Level
Item <- xtabs(~BigMart$Item_Type)
Outlet_Size <- xtabs(~BigMart$Outlet_Size)
#Outlet_Size
Outlet_Identifier <- xtabs(~BigMart$Outlet_Identifier)
#Outlet_Identifier
#Outlet_Location
Outlet_Type <- xtabs(~BigMart$Outlet_Type)
#Outlet_Type
table1 <- xtabs(~BigMart$Item_Type+BigMart$Item_Fat_Content)
table2 <- xtabs(~BigMart$Item_Type+BigMart$Outlet_Location_Type)
table3 <- xtabs(~BigMart$Outlet_Type+BigMart$Outlet_Size)
#table3
table4 <- xtabs(~BigMart$Outlet_Type+BigMart$Outlet_Location_Type)
#table4
Train[Index,"Item_Fat_Content"] <- "Low Fat"
Outlet_Location <- xtabs(~BigMart$Outlet_Location_Type)
#table2
View(BigMart)
#hist(x, breaks = bins, col = 'darkgray', border = 'white')
#table1
#Item
dim(BigMart)
print("Hello")
Corr_Matrix <- BigMart[,c(2,4,6,8,12)]
cor(Corr_Matrix)
corrplot(corr=cor(Corr_Matrix),method="ellipse")
Test1 <- xtabs(~BigMart$Item_Visibility+BigMart$Item_Outlet_Sales)
Test2  <-xtabs(~BigMart$Item_Weight+BigMart$Item_Outlet_Sales)
Test3  <-xtabs(~BigMart$Item_MRP+BigMart$Item_Outlet_Sales)
chisq.test(Test1)
chisq.test(Test2)
chisq.test(Test3)
t.test(BigMart$Item_MRP,BigMart$Item_Outlet_Sales)
# Run the application
#https://rpubs.com/pcrao22/BigMart_SalesPrediction  Reference
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
# Application title
titlePanel( "Sales Data Analysis" )
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Tab1","First", plotOutput("distPlot")),
tabPanel("Tab2","Second", plotOutput("distPlot1")),
tabPanel("Tab3","Third",plotOutput("distPlot2")),
tabPanel("Tab4","Fourth",plotOutput("distPlot3")),
tabPanel("Tab5","Fourth",plotOutput("distPlot4")),
tabPanel("Table1","Fifth",verbatimTextOutput("table1"))
)
)
)
))
source('F:/Rprog/Rpackage/Sales-Data-Analysis/Big-Mart-Sales-master/package123.r', echo=TRUE)
print(source('package123.r')$value)
print(source('package123.r')$value)
print(source('package123.r')$value)
print(source('package123.r')$value)
print(source('package123.r')$value)
print(source('package123.r')$value)
print(source('package123.r')$value)
cor(Corr_Matrix)
